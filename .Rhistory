lambda2 = 0.1,
learning_rate_vec = c(0.0001, 0.0005, 0.001, 0.002,0.003, 0.004, 0.005),
nsteps_vec = c(100,200,300,400)) {
require("reticulate")
source_python('/Users/zli16/Dropbox/TransCox/TransCox_package/TransCox/python/TransCoxFunction.py')
Cout <- GetAuxSurv(auxData, cov = cov)
Pout <- GetPrimaryParam(primData, q = Cout$q, estR = Cout$estR)
CovData = Pout$primData[, cov]
status = Pout$primData[, statusvar]
cumH = Pout$primData$fullCumQ
hazards = Pout$dQ$dQ
BICmat <- matrix(NA, length(learning_rate_vec), length(nsteps_vec))
pb = txtProgressBar(min = 0, max = (length(learning_rate_vec))^2, style = 2, initial = 0)
for(i in 1:length(learning_rate_vec)) {
for(j in 1:length(nsteps_vec)) {
thisi = (i-1) * length(learning_rate_vec) + j
setTxtProgressBar(pb, thisi)
learning_rate = learning_rate_vec[i]
nsteps = nsteps_vec[j]
test <- TransCox(CovData = as.matrix(CovData),
cumH = cumH,
hazards = hazards,
status = status,
estR = Pout$estR,
Xinn = Pout$Xinn,
lambda1 = lambda1,
lambda2 = lambda2,
learning_rate = learning_rate,
nsteps = nsteps)
names(test) <- c("eta", "xi")
newBeta = Pout$estR + test$eta
newHaz = Pout$dQ$dQ + test$xi
BICvalue <- GetBIC(status = status,
CovData = CovData,
hazards = hazards,
newBeta = newBeta,
newHaz = newHaz,
eta = test$eta,
xi = test$xi,
cutoff = 1e-5)
BICmat[i,j] <- BICvalue
}
}
close(pb)
rownames(BICmat) = learning_rate_vec
colnames(BICmat) <- nsteps_vec
idx0 <- which(BICmat == min(BICmat, na.rm = TRUE), arr.ind = TRUE)
b_learning_rate <- learning_rate_vec[idx0[1]]
b_nsteps <- nsteps_vec[idx0[2]]
return(list(best_lr = b_learning_rate,
best_nsteps = b_nsteps,
BICmat = BICmat))
}
onedata <- GenSimData(nprim = 200,
naux = 500,
setting = 1)
SelLR_By_BIC(primData = onedata$primData,
auxData = onedata$auxData,
cov = c("X1", "X2"),
statusvar = "status", lambda1 = 0.1, lambda2 = 0.1,
learning_rate_vec = c(0.001, 0.002, 0.003, 0.004, 0.005),
nsteps_vec = c(100, 200))
GenSimData <- function(nprim = 200,
naux = 500,
setting = 1) {
### two covarites first
X1_p = stats::runif(nprim, 0, 1)
X2_p  = stats::rbinom(nprim, size = 1, prob = 0.5)
X1_a = stats::runif(naux, 0, 1)
X2_a = stats::rbinom(naux, size = 1, prob = 0.5)
b1_p = -0.5
b2_p = 0.5
XB_p = cbind(X1_p, X2_p) %*% c(b1_p, b2_p)
scale_p = exp(-XB_p/2)
shape_p = 2
if(setting %in% c(1,3)) {
b1_a = -0.5
b2_a = 0.5
} else if(setting %in% c(2,4)) {
b1_a = -0.5
b2_a = 0.2
}
if(setting %in% c(1,2)) {
XB_a = cbind(X1_a, X2_a) %*% c(b1_a, b2_a)
scale_a = exp(-XB_a/2)
shape_a = 2
} else if(setting %in% c(3,4)) {
XB_a = cbind(X1_a, X2_a) %*% c(b1_a, b2_a)
scale_a = exp(-XB_a/2)*3/2
shape_a = 2
}
T_p = stats::rweibull(nprim, shape = shape_p, scale = scale_p)
C_p = stats::runif(nprim, 0, 4.55)
survTime_p = ifelse(T_p < C_p, T_p, C_p)
event_p = ifelse(T_p < C_p, 2, 1)
T_a = stats::rweibull(naux, shape = shape_a, scale = scale_a)
C_a = stats::runif(naux, 0, 4.55)
survTime_a = ifelse(T_a < C_a, T_a, C_a)
event_a = ifelse(T_a < C_a, 2, 1)
primData = data.frame(X1 = X1_p,
X2 = X2_p,
time = survTime_p,
status = event_p)
auxData = data.frame(X1 = X1_a,
X2 = X2_a,
time = survTime_a,
status = event_a)
return(list(primData = primData,
auxData = auxData))
}
getCumEval <- function(bhest) {
breakPoint <- seq(0.15, 2.5, length.out = 50)
Heval <- rep(NA, length(breakPoint))
for(i in 1:length(breakPoint)) {
diff <- breakPoint[i] - bhest$time
Heval[i] <- bhest$hazard[which.min(abs(diff))]
}
return(Heval)
}
GetAuxSurv <- function(auxData, weights = NULL, cov = c("X1", "X2")) {
res.cox <- c()
functext = paste0("res.cox <- survival::coxph(survival::Surv(time, status == 2) ~ ", paste(cov, collapse = "+"), ", data = auxData, weights = weights)")
### Give auxiliary data, estimate r and q
eval(parse(text = functext))
bhest <- survival::basehaz(res.cox, centered=FALSE) ## get baseline cumulative hazards
estR <- res.cox$coefficients
q <- data.frame(cumHazards = bhest$hazard,
breakPoints = bhest$time)
return(list(estR = estR,
q = q))
}
onedata <- GenSimData(nprim = 200,
naux = 500,
setting = 1)
SelLR_By_BIC(primData = onedata$primData,
auxData = onedata$auxData,
cov = c("X1", "X2"),
statusvar = "status", lambda1 = 0.1, lambda2 = 0.1,
learning_rate_vec = c(0.001, 0.002, 0.003, 0.004, 0.005),
nsteps_vec = c(100, 200))
GetPrimaryParam <- function(primData, q, estR) {
### get primary data-specific breakpoints and hazards
primData <- primData[order(primData$time), ]
dQ <- deltaQ(primData, q)
primData <- primData[order(primData$time), ]
fullcum <- rep(0, nrow(primData))
idx0 <- match(dQ$t, primData$time)
### get cumQ
fullcum[idx0] <- dQ$cumQ_upd
for(i in 1:length(fullcum)) {
if(fullcum[i] == 0 & i>1) {
fullcum[i] = fullcum[i-1]
}
}
primData$fullCumQ = fullcum
#### get Ximat
Ximat <- matrix(0, nrow(primData), nrow(primData))
for(i in 1:nrow(primData)) {
tmpidx = rep(0, nrow(primData))
for(j in 1:i) {
if(primData$status[j] == 2)
tmpidx[j] = 1
}
Ximat[i,] <- tmpidx
}
Xinn <- Ximat[,which(primData$status == 2)]
return(list(primData = primData,
Xinn = Xinn,
dQ = dQ,
estR = estR))
}
onedata <- GenSimData(nprim = 200,
naux = 500,
setting = 1)
SelLR_By_BIC(primData = onedata$primData,
auxData = onedata$auxData,
cov = c("X1", "X2"),
statusvar = "status", lambda1 = 0.1, lambda2 = 0.1,
learning_rate_vec = c(0.001, 0.002, 0.003, 0.004, 0.005),
nsteps_vec = c(100, 200))
deltaQ <- function(primData, q) {
#### get cumulative hazards for primary data
#### from the combined data
obsData <- primData[primData$status == 2, ]
obsData <- obsData[order(obsData$time), ]
newQ <- data.frame(dQ  = rep(NA, nrow(obsData)),
cumQ = rep(NA, nrow(obsData)),
t = rep(NA, nrow(obsData)))
for(i in 1:nrow(obsData)) {
if (i == 1) {
newQ$t[i] <- obsData$time[i]
tmp1 <- q$breakPoints<=obsData$time[i]
if(all(!tmp1)) {
idx0 <- 1
} else {
idx0 <- max(which(tmp1))
}
newQ$dQ[i] = newQ$cumQ[i] <- q$cumHazards[idx0]
} else {
newQ$t[i] <- obsData$time[i]
tmp1 <- q$breakPoints<=obsData$time[i]
if(all(!tmp1)) {
idx0 <- 1
} else {
idx0 <- max(which(tmp1))
}
newQ$cumQ[i] <- q$cumHazards[idx0]
newQ$dQ[i] <- q$cumHazards[idx0] - newQ$cumQ[(i-1)]
}
}
newQ$dQ[newQ$dQ == 0] <- 0.0001
newQ$cumQ_upd <- newQ$cumQ
for(i in 1:nrow(newQ)) {
newQ$cumQ_upd[i] <- sum(newQ$dQ[1:i])
}
return(newQ)
}
onedata <- GenSimData(nprim = 200,
naux = 500,
setting = 1)
SelLR_By_BIC(primData = onedata$primData,
auxData = onedata$auxData,
cov = c("X1", "X2"),
statusvar = "status", lambda1 = 0.1, lambda2 = 0.1,
learning_rate_vec = c(0.001, 0.002, 0.003, 0.004, 0.005),
nsteps_vec = c(100, 200))
GetBIC <- function(status, CovData, hazards,
newBeta,
newHaz,
eta,
xi,cutoff = 1e-5) {
Logl <- GetLogLike(status = status,
CovData = CovData,
hazards = hazards,
newBeta = newBeta,
newHaz = newHaz)
K = sum(c(abs(eta), abs(xi))>cutoff)
n = length(status)
BIC <- K*log(n) - 2*Logl
return(BIC)
}
onedata <- GenSimData(nprim = 200,
naux = 500,
setting = 1)
SelLR_By_BIC(primData = onedata$primData,
auxData = onedata$auxData,
cov = c("X1", "X2"),
statusvar = "status", lambda1 = 0.1, lambda2 = 0.1,
learning_rate_vec = c(0.001, 0.002, 0.003, 0.004, 0.005),
nsteps_vec = c(100, 200))
GetLogLike <- function(status, CovData, hazards,
newBeta,
newHaz) {
XB = as.matrix(CovData) %*% newBeta
newCumH <- dQtocumQ(newHaz, status)
LogL <- sum(XB[status == 2] + log(newHaz)) - sum(newCumH * exp(XB))
return(LogL)
}
onedata <- GenSimData(nprim = 200,
naux = 500,
setting = 1)
SelLR_By_BIC(primData = onedata$primData,
auxData = onedata$auxData,
cov = c("X1", "X2"),
statusvar = "status", lambda1 = 0.1, lambda2 = 0.1,
learning_rate_vec = c(0.001, 0.002, 0.003, 0.004, 0.005),
nsteps_vec = c(100, 200))
dQtocumQ <- function(dQ, status = NULL) {
if(length(status)>0) {
cumQ = rep(NA, length(status))
ncount = 1
for(i in 1:length(status)) {
if(status[i] == 2) {
cumQ[i] = sum(dQ[1:ncount])
ncount = ncount + 1
if(ncount > length(dQ)) {
ncount = length(dQ)
}
} else {
cumQ[i] = sum(dQ[1:ncount])
}
}
} else {
cumQ = rep(NA, length(dQ))
for(i in 1:length(dQ)) {
cumQ[i] = sum(dQ[1:i])
}
}
return(cumQ)
}
onedata <- GenSimData(nprim = 200,
naux = 500,
setting = 1)
SelLR_By_BIC(primData = onedata$primData,
auxData = onedata$auxData,
cov = c("X1", "X2"),
statusvar = "status", lambda1 = 0.1, lambda2 = 0.1,
learning_rate_vec = c(0.001, 0.002, 0.003, 0.004, 0.005),
nsteps_vec = c(100, 200))
library(TransCox)
library(TransCox)
onedata <- GenSimData(nprim = 200,
naux = 500,
setting = 1)
pData = onedata$primData
aData = onedata$auxData
Cout <- GetAuxSurv(aData, cov = c("X1", "X2"))
Pout <- GetPrimaryParam(pData, q = Cout$q, estR = Cout$estR)
onedata <- GenData(nprim = 200,
naux = 500,
setting = 1)
SelParam_By_BIC(primData = onedata$primData,
auxData = onedata$auxData,
cov = c("X1", "X2"),
statusvar = "status",
lambda1_vec = c(0.1, 0.5, seq(1, 10, by = 0.5)),
lambda2_vec = c(0.1, 0.5, seq(1, 10, by = 0.5)),
learning_rate = 0.002, nsteps = 200)
SelLR_By_BIC(primData = onedata$primData,
auxData = onedata$auxData,
cov = c("X1", "X2"),
statusvar = "status", lambda1 = 0.1, lambda2 = 0.1,
learning_rate_vec = c(0.001, 0.002, 0.003, 0.004, 0.005),
nsteps_vec = c(100, 200))
Tres <- runTransCox_one(Pout, l1 = 0.1, l2 = 0.1, learning_rate = 0.003, nsteps = 200, cov = c("X1", "X2"))
BTres <- runBtsp_transCox(aData,
pData,
Tres = Tres,
BestLam1 = 0.1,
BestLam2 = 0.1,
learning_rate = 0.002,
nsteps = 200,
nbootstrap = 10,
Hrange = seq(0.15, 2, length.out = 50),
trueBeta = c(-0.5, 0.5),
cov = c("X1", "X2"))
Tres <- runTransCox_one(Pout, l1 = 0.1, l2 = 0.1, learning_rate = 0.003, nsteps = 200, cov = c("X1", "X2"))
Tres
setwd("/Users/zli16/Box/Irene/Storti_SingleCell/Analysis")
load("/Users/zli16/Box/Irene/Storti_SingleCell/Data/1-2022004n_filteredData.RData")
OneSample <- filtered_sObject_DB
library(Seurat)
head(OneSample@meta.data)
table(OneSample$orig.ident)  # 6687
#### CD34
OneSample <- NormalizeData(OneSample)
OneSample <- FindVariableFeatures(OneSample, selection.method = "vst", nfeatures = 2000)
all.genes <- rownames(OneSample)
OneSample <- ScaleData(OneSample, features = all.genes)
OneSample <- RunPCA(OneSample, features = VariableFeatures(object = OneSample))
OneSample <- FindNeighbors(OneSample, dims = 1:20)
OneSample <- FindClusters(OneSample, resolution = 0.5)
OneSample <- RunUMAP(OneSample, dims = 1:20)
OneSample[["percent.mt"]] <- PercentageFeatureSet(OneSample, pattern = "^MT-")
p1 <- VlnPlot(OneSample, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), group.by = "seurat_clusters" ,ncol = 3, pt.size = 0)
p1
DimPlot(OneSample, reduction = "umap", split.by = "orig.ident", pt.size = 0.8, ncol = 3)
DimPlot(OneSample, reduction = "umap", label = TRUE, pt.size = .8)
sum(table(OneSample$seurat_clusters))
## subset the Seurat object by removing cluster 7 and 3
table(Idents(OneSample))
NewSample <- subset(x = OneSample, subset = seurat_clusters %in% c(0,1,2,4,5,6,8))
dim(NewSample)
NewSample <- NormalizeData(NewSample)
NewSample <- FindVariableFeatures(NewSample, selection.method = "vst", nfeatures = 2000)
all.genes <- rownames(NewSample)
NewSample <- ScaleData(NewSample, features = all.genes)
NewSample <- RunPCA(NewSample, features = VariableFeatures(object = NewSample))
NewSample <- FindNeighbors(NewSample, dims = 1:20)
NewSample <- FindClusters(NewSample, resolution = 0.5)
NewSample <- RunUMAP(NewSample, dims = 1:20)
NewSample[["percent.mt"]] <- PercentageFeatureSet(NewSample, pattern = "^MT-")
p1 <- VlnPlot(NewSample, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), group.by = "seurat_clusters" ,ncol = 3, pt.size = 0)
p1
DimPlot(NewSample, reduction = "umap", split.by = "orig.ident", pt.size = 0.8, ncol = 3)
DimPlot(NewSample, reduction = "umap", label = TRUE, pt.size = .8)
FeaturePlot(NewSample, reduction = "umap", features = "GYPA")
DotPlot(NewSample, features = "GYPA") + RotatedAxis()
VlnPlot(NewSample, features = "GYPA")
# find markers for every cluster compared to all remaining cells, report only the positive
# ones
library(dplyr)
NewSample.markers <- FindAllMarkers(NewSample, only.pos = TRUE, min.pct = 0.10, logfc.threshold = 0.25)
NewSample.markers %>%
group_by(cluster) %>%
slice_max(n = 2, order_by = avg_log2FC)
head(NewSample.markers)
write.csv(NewSample.markers, file = "Cluster_specific_markers_Subject1-2022004n_removeC3C7.csv")
install.packages("testthat")
library(testthat)
?test_that
?skip
tensorflow::py_module_available("tensorflow")
reticulate::py_module_available("tensorflow")
library(TransCox)
library(TransCox)
onedata <- GenSimData(nprim = 200,
naux = 500,
setting = 1)
pData = onedata$primData
aData = onedata$auxData
Cout <- GetAuxSurv(aData, cov = c("X1", "X2"))
Pout <- GetPrimaryParam(pData, q = Cout$q, estR = Cout$estR)
SelParam_By_BIC(primData = onedata$primData,
auxData = onedata$auxData,
cov = c("X1", "X2"),
statusvar = "status",
lambda1_vec = c(0.1, 0.5, seq(1, 10, by = 0.5)),
lambda2_vec = c(0.1, 0.5, seq(1, 10, by = 0.5)),
learning_rate = 0.002, nsteps = 200)
?py_run_file
library(TransCox)
library(TransCox)
SelParam_By_BIC(primData = onedata$primData,
auxData = onedata$auxData,
cov = c("X1", "X2"),
statusvar = "status",
lambda1_vec = c(0.1, 0.5, seq(1, 10, by = 0.5)),
lambda2_vec = c(0.1, 0.5, seq(1, 10, by = 0.5)),
learning_rate = 0.002, nsteps = 200)
reticulate::py_run_file(system.file("python", "TransCoxFunction.py", package = "TranxCox"))
reticulate::py_run_file(system.file("python", "TransCoxFunction.py", package = "TranxCox"))
system.file("python", "TransCoxFunction.py", package = "TranxCox")
?system.file
system.file("TransCoxFunction.py", package = "TranxCox")
system.file("GenSimData.R", package = "TranxCox")
system.file("python", "TransCoxFunction.py", package = "TransCox")
library(TransCox)
SelParam_By_BIC(primData = onedata$primData,
auxData = onedata$auxData,
cov = c("X1", "X2"),
statusvar = "status",
lambda1_vec = c(0.1, 0.5, seq(1, 10, by = 0.5)),
lambda2_vec = c(0.1, 0.5, seq(1, 10, by = 0.5)),
learning_rate = 0.002, nsteps = 200)
reticulate::py_run_file(system.file("python", "TransCoxFunction.py", package = "TransCox"))
SelParam_By_BIC(primData = onedata$primData,
auxData = onedata$auxData,
cov = c("X1", "X2"),
statusvar = "status",
lambda1_vec = c(0.1, 0.5, seq(1, 10, by = 0.5)),
lambda2_vec = c(0.1, 0.5, seq(1, 10, by = 0.5)),
learning_rate = 0.002, nsteps = 200)
# require("reticulate")
source_python('/Users/zli16/Dropbox/TransCox/TransCox_package/TransCox/inst/python/TransCoxFunction.py')
source_python(system.file("python", "TransCoxFunction.py", package = "TransCox"))
system.file("python", "TransCoxFunction.py", package = "TransCox")
SelParam_By_BIC(primData = onedata$primData,
auxData = onedata$auxData,
cov = c("X1", "X2"),
statusvar = "status",
lambda1_vec = c(0.1, 0.5, seq(1, 10, by = 0.5)),
lambda2_vec = c(0.1, 0.5, seq(1, 10, by = 0.5)),
learning_rate = 0.002, nsteps = 200)
library(TransCox)
library(TransCox)
onedata <- GenSimData(nprim = 200,
naux = 500,
setting = 1)
pData = onedata$primData
aData = onedata$auxData
Cout <- GetAuxSurv(aData, cov = c("X1", "X2"))
Pout <- GetPrimaryParam(pData, q = Cout$q, estR = Cout$estR)
SelParam_By_BIC(primData = onedata$primData,
auxData = onedata$auxData,
cov = c("X1", "X2"),
statusvar = "status",
lambda1_vec = c(0.1, 0.5, seq(1, 10, by = 0.5)),
lambda2_vec = c(0.1, 0.5, seq(1, 10, by = 0.5)),
learning_rate = 0.002, nsteps = 200)
library(TransCox)
onedata <- GenSimData(nprim = 200,
naux = 500,
setting = 1)
pData = onedata$primData
aData = onedata$auxData
Cout <- GetAuxSurv(aData, cov = c("X1", "X2"))
Pout <- GetPrimaryParam(pData, q = Cout$q, estR = Cout$estR)
SelParam_By_BIC(primData = onedata$primData,
auxData = onedata$auxData,
cov = c("X1", "X2"),
statusvar = "status",
lambda1_vec = c(0.1, 0.5, seq(1, 10, by = 0.5)),
lambda2_vec = c(0.1, 0.5, seq(1, 10, by = 0.5)),
learning_rate = 0.002, nsteps = 200)
source_python(system.file("python", "TransCoxFunction.py", package = "TransCox"))
SelParam_By_BIC(primData = onedata$primData,
auxData = onedata$auxData,
cov = c("X1", "X2"),
statusvar = "status",
lambda1_vec = c(0.1, 0.5, seq(1, 10, by = 0.5)),
lambda2_vec = c(0.1, 0.5, seq(1, 10, by = 0.5)),
learning_rate = 0.002, nsteps = 200)
SelLR_By_BIC(primData = onedata$primData,
auxData = onedata$auxData,
cov = c("X1", "X2"),
statusvar = "status", lambda1 = 0.1, lambda2 = 0.1,
learning_rate_vec = c(0.001, 0.002, 0.003, 0.004, 0.005),
nsteps_vec = c(100, 200))
Tres <- runTransCox_one(Pout, l1 = 0.1, l2 = 0.1, learning_rate = 0.003, nsteps = 200, cov = c("X1", "X2"))
Tres
BTres <- runBtsp_transCox(aData,
pData,
Tres = Tres,
BestLam1 = 0.1,
BestLam2 = 0.1,
learning_rate = 0.002,
nsteps = 200,
nbootstrap = 10,
Hrange = seq(0.15, 2, length.out = 50),
trueBeta = c(-0.5, 0.5),
cov = c("X1", "X2"))
